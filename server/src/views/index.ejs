<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Versik-Calc</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
        }
        form {
            margin-bottom: 20px;
        }
        label {
            margin-right: 10px;
        }
        select {
            margin-right: 10px;
        }
        button {
            padding: 5px 10px;
            background-color: #4CAF50;
            color: white;
            border: none;
            cursor: pointer;
        }
        button:hover {
            background-color: #45a049;
        }
        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
        }
        th, td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: left;
        }
        th {
            background-color: #f2f2f2;
        }
        tr:nth-child(even) {
            background-color: #f9f9f9;
        }
        tr:hover {
            background-color: #f1f1f1;
        }
    </style>
</head>
<body>
    <% 
        const policyLimits = [100, 200, 250, 300, 500, 750, 1000, 1500, 2000, 2000, 2500, 3000, 4000, 5000];
        const policyLimitsV2 = [100000, 200000, 250000, 300000, 500000, 750000, 1000000, 1500000, 2000000, 2500000, 3000000, 4000000, 5000000, 10000000];


        const unlimitedValues = data.reduce((sum, item) => {
            let productSum = 0;
            for (let i = 1; i <= 12; i++) {
                const mean = parseFloat(String(item[`Mean${i}`]).replace(',', '.'));
                const wt = parseFloat(String(item[`Wt${i}`]).replace(',', '.'));
                if (!isNaN(mean) && !isNaN(wt)) {
                    productSum += mean * wt;
                }
            }
            return sum + productSum;
        }, 0);

        const alphaValue1 = data[0] && !isNaN(parseFloat(data[0].a)) ? 
            (1 - Math.sqrt(parseFloat((data[0].a).replace(',', '.')) * 3)) : 'N/A';
        const alphaValue2 = 1;
        const alphaValue3 = data[0] && !isNaN(parseFloat(data[0].a)) ? 
            (1 + Math.sqrt(parseFloat((data[0].a).replace(',', '.')) * 3)) : 'N/A';

        const unlimitedValuesV2 = data.reduce((sum, item) => {
            let productSum = 0;
            for (let i = 1; i <= 12; i++) {
                const mean = parseFloat(String(item[`Mean${i}`]).replace(',', '.'));
                const wt = parseFloat(String(item[`Wt${i}`]).replace(',', '.'));
                productSum += mean * mean * wt;
            }
            return 2 * (sum + productSum);
        }, 0);

        const sumProductAlpha1 = data.reduce((sum, item) => {
            let productSum = 0;
            for (let i = 1; i <= 12; i++) {
                const mean = parseFloat(String(item[`Mean${i}`]).replace(',', '.'));
                const wt = parseFloat(String(item[`Wt${i}`]).replace(',', '.'));
                if (!isNaN(mean) && !isNaN(wt)) {
                    productSum += mean * wt;
                }
            }
            return sum + productSum;
        }, 0);

        function LimitedAverageSeverity(aValue, uValue, Policylimit){
            const LimitedAverageSeverity = data.reduce((sum, item) => {
                let productSum = 0;
                for (let i = 1; i <= 12; i++) {
                    const mean = parseFloat(String(item[`Mean${i}`]).replace(',', '.')) * aValue;
                    const wt = parseFloat(String(item[`Wt${i}`]).replace(',', '.'));


                    if (!isNaN(mean) && !isNaN(wt)) {
                        productSum += mean * wt * Math.exp(-Policylimit / mean);
                    }
                }
                return sum + productSum;
            }, 0);
            return uValue - LimitedAverageSeverity;
        }

        function LimitedSecondMoment(aValue, uValue, Policylimit){
            const LimitedSecondMoment = data.reduce((sum, item) => {
                let productSum = 0;
                for (let i = 1; i <= 12; i++) {
                    const mean = parseFloat(String(item[`Mean${i}`]).replace(',', '.')) * aValue;
                    const wt = parseFloat(String(item[`Wt${i}`]).replace(',', '.'));


                    if (!isNaN(mean) && !isNaN(wt)) {
                        productSum += mean * wt * (mean + Policylimit) * Math.exp(-Policylimit / mean);
                    }
                }
                return sum + productSum;
            }, 0);
            return uValue - 2 * LimitedSecondMoment;
        }

        function FinalRiskLoadAmounts(PolicyLimit){
            const risk_parm = parseFloat(String(data[0].risk_parm).replace(',', '.'));
            const d = parseFloat(String(data[0].d).replace(',', '.'));

            const AverageAlpha1 = LimitedAverageSeverity(alphaValue1, unlimitedValues * alphaValue1, PolicyLimit)
            const AverageAlpha2 = LimitedAverageSeverity(alphaValue2, unlimitedValues * alphaValue2, PolicyLimit)
            const AverageAlpha3 = LimitedAverageSeverity(alphaValue3, unlimitedValues * alphaValue3, PolicyLimit)
            const SecondAlpha1 = LimitedSecondMoment(alphaValue1, unlimitedValuesV2 * alphaValue1 * alphaValue1, PolicyLimit)
            const SecondAlpha2 = LimitedSecondMoment(alphaValue2, unlimitedValuesV2 * alphaValue2, PolicyLimit)
            const SecondAlpha3 = LimitedSecondMoment(alphaValue3, unlimitedValuesV2 * alphaValue3 * alphaValue3, PolicyLimit)

            return risk_parm * 0.0000001 * 
                    ((SecondAlpha1 + 4 * SecondAlpha2 + SecondAlpha3) +
                    (d * (Math.pow(AverageAlpha1, 2) + 4 * Math.pow(AverageAlpha2, 2) + Math.pow(AverageAlpha3, 2))))/6;
            
        }


        function LimitedAvergaeSeverity(){
            const LimitedAvergaeSeverity = data.reduce((sum, item) => {
                let productSum = 0;
                for (let i = 1; i <= 12; i++) {
                    const mean = parseFloat(String(item[`Mean${i}`]).replace(',', '.'));
                    const wt = parseFloat(String(item[`Wt${i}`]).replace(',', '.'));
                    productSum += mean * wt;
                }
                return sum + productSum;
                }, 0);
        }

    %>

    <form action="/filter" method="post" id="filterForm">
        <label for="lob">Select LOB:</label>
        <select name="lob" id="lob" onchange="document.getElementById('filterForm').submit()">
            <% lobs.forEach(function(lob) { %>
                <option value="<%= lob %>" <%= lob === selectedLob ? 'selected' : '' %>><%= lob %></option>
            <% }); %>
        </select>
        
        <% if (names && names.length > 0) { %>
            <label for="name">Select Name:</label>
            <select name="name" id="name">
                <% names.forEach(function(name) { %>
                    <option value="<%= name %>" <%= name === selectedName ? 'selected' : '' %>><%= name %></option>
                <% }); %>
            </select>
        <% } %>

        <button type="submit">Filter</button>
    </form>

    <h2>Filtered Data</h2>
    <% if (data.length > 0) { %>
        <table>
            <thead>
                <tr>
                    <% Object.keys(data[0]).forEach(function(key) { %>
                        <th><%= key %></th>
                    <% }); %>
                </tr>
            </thead>
            <tbody>
                <% data.forEach(function(item) { %>
                    <tr>
                        <% Object.keys(item).forEach(function(key) { %>
                            <td><%= item[key] %></td>
                        <% }); %>
                    </tr>
                <% }); %>
            </tbody>
        </table>

        <h2>Mild Calcs</h2>
        <table>
            <thead>
                <tr>
                    <th>Policy limit</th>
                    <th>Limited Avergae Severity</th>
                    <th>ALAE per Occurence</th>
                    <th>ULAE per Occurence</th>
                    <th>Without Risk Load</th>
                    <th>Process Risk Load</th>
                    <th>Parameter Risk Load</th>
                    <th>ILF With Risk Load</th>
                </tr>
            </thead>
            <tbody>
                <% for (let i = 0; i < policyLimits.length; i++) { %>
                    <tr>
                        <td><%= policyLimits[i] %></td>
                        <td><%= data[i] ? data[i].ALAE * data[i].nbarc : '' %></td>
                        <td><%= data[0].ALAE %></td>
                        <td></td>
                        <td></td>
                        <td><%= FinalRiskLoadAmounts(policyLimits[i]*1000).toFixed(0) %></td>
                        <td></td>
                        <td></td>
                    </tr>
                <% } %>
            </tbody>
        </table>

        <h2>Backup Calcs</h2>
        <table>
            <thead>
                <tr>
                    <th>Row</th>
                    <th>Value</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>Unlimited Values</td>
                    <td><%= Math.floor(unlimitedValues * alphaValue1) %></td>
                    <td><%= Math.floor(unlimitedValues * alphaValue2) %></td>
                    <td><%= Math.floor(unlimitedValues * alphaValue3) %></td>
                    <td><%= Math.floor(unlimitedValuesV2 * alphaValue1 * alphaValue1) %></td>
                    <td><%= Math.floor(unlimitedValuesV2 * alphaValue2) %></td>
                    <td><%= Math.floor(unlimitedValuesV2 * alphaValue3 * alphaValue3) %></td>
                </tr>
                <tr>
                    <td>Alpha=</td>
                    <td><%= alphaValue1 %></td>
                    <td><%= alphaValue2 %></td>
                    <td><%= alphaValue3 %></td>
                    <td><%= alphaValue1 %></td>
                    <td><%= alphaValue2 %></td>
                    <td><%= alphaValue3 %></td>
                </tr>
            </tbody>
        </table>

        <h2>Backup Calcs V2</h2>
        <table>
            <thead>
                <tr>
                    <th>Policy Limit</th>
                    <th>Bsc Lim Loss Wt</th>
                    <th>Alpha1</th>
                    <th>Alpha2</th>
                    <th>Alpha3</th>
                    <th>Alpha1</th>
                    <th>Alpha2</th>
                    <th>Alpha3</th>
                    <th>Process</th>
                    <th>Frequency</th>
                    <th>Severity</th>
                </tr>
            </thead>
            <tbody>
                <% policyLimitsV2.forEach(function(limit, index) { %>
                    <tr>
                        <td><%= limit %></td>
                        <td><%= data[0][Object.keys(data[0])[index + 15]] %></td>
                        <td><%= LimitedAverageSeverity(alphaValue1, unlimitedValues * alphaValue1, limit).toFixed(0) %></td>
                        <td><%= LimitedAverageSeverity(alphaValue2, unlimitedValues * alphaValue2, limit).toFixed(0)%></td>
                        <td><%= LimitedAverageSeverity(alphaValue3, unlimitedValues * alphaValue3, limit).toFixed(0) %></td>
                        <td><%= LimitedSecondMoment(alphaValue1, unlimitedValuesV2 * alphaValue1 * alphaValue1, limit).toFixed(0) %></td>
                        <td><%= LimitedSecondMoment(alphaValue2, unlimitedValuesV2 * alphaValue2, limit).toFixed(0) %></td>
                        <td><%= LimitedSecondMoment(alphaValue3, unlimitedValuesV2 * alphaValue3 * alphaValue3, limit).toFixed(0) %></td>
                        <td><%= FinalRiskLoadAmounts(limit) %></td>
                    </tr>
                <% }); %>
            </tbody>
        </table>
    <% } else { %>
        <p>No data available</p>
    <% } %>
</body>
</html>